import React, { useState, useEffect } from 'react'
import Head from 'next/head'
import LayoutCustom from '../components/layoutCustom'
import styles from '../styles/Home.module.css';
import styleMerchandise from '../styles/merchandise.module.css';
import { Row, Col, Avatar, Tooltip, Drawer, Input, Tag, Result, Spin } from 'antd';
import CardComponent from '../components/card';
import { fadeIn } from 'react-animations';
import Radium, { StyleRoot } from 'radium';
import { LeftOutlined, RightOutlined, SettingOutlined } from '@ant-design/icons';
import ModalDetailProduct from '../components/modalDetailProduct'
import { useDispatch, useSelector } from 'react-redux'
import {
  setDataFavouriteProduct,
  getFavouriteProduct,
  getListTags
} from '../storeRedux/actions/actionCreator'

const { Search } = Input
const { CheckableTag } = Tag;

export default function Favourite() {

  const dispatch = useDispatch()

  const dataFavouriteProduct = useSelector(state => state.clientReducer.dataFavouriteProduct)
  const dataListTags = useSelector(state => state.clientReducer.dataListTags)
  const loadingMerchandise = useSelector(state => state.clientReducer.loadingMerchandise)

  const [dataHotProduct, setDataHotProduct] = useState([])
  const [dataSkeleton] = useState([1,1,1,1,1,1,1,1])
  const [tagsData, setTagsData] = useState([])
  const [selectedTags, setSelectedTags] = useState([])

  const [visibleSettings, setVisibleSettings] = useState(false)
  const [paramsMerchandise, setParamsMerchandise] = useState({ page: 1, limit: 8, sorts: 'createdAt:ASC' })

  useEffect(() => {
    dispatch(getFavouriteProduct(paramsMerchandise))
    dispatch(getListTags({}))
  }, [])

  useEffect(() => {
    if(dataFavouriteProduct) {
      setDataHotProduct(dataFavouriteProduct.data)
      setParamsMerchandise({ ...paramsMerchandise, page: dataFavouriteProduct.currentPage })
    }
    if(dataListTags) {
      setTagsData(dataListTags.data)
    }
  }, [dataFavouriteProduct, dataListTags])

  useEffect(() => {
    if(selectedTags) {
      let tempParams = ''
      if(selectedTags.length > 0) {
        selectedTags.forEach((dataForEach) => {
          if(tempParams) {
            tempParams += `_OR_$Merchandise.TagId$~${dataForEach}`
          } else {
            tempParams = `$Merchandise.TagId$~${dataForEach}`
          }
        })
      }
      const params = { ...paramsMerchandise, search: tempParams }
      setParamsMerchandise({ ...paramsMerchandise, search: tempParams })
      dispatch(getFavouriteProduct(params))
    }
  }, [selectedTags])

  useEffect(() => () => {
    dispatch(setDataFavouriteProduct({}))
  }, [])

  const handleSettings = () => {
    setVisibleSettings(true)
  }

  const onClose = () => {
    setVisibleSettings(false)
  }

  const onSearch = (value) => {
    let params = {
      ...paramsMerchandise
    }
    if(value) {
      params = { ...paramsMerchandise, search: `name~*${value ? value : ''}*` }
      setParamsMerchandise({ ...paramsMerchandise, search: `name~*${value ? value : ''}*` })
    }
    dispatch(getFavouriteProduct(params))
  }

  const handleSearch = (event) => {
    onSearch(event.target.value)
  }

  const handleBackPagination = () => {
    if(dataFavouriteProduct && dataFavouriteProduct.totalPage !== 0 && dataFavouriteProduct.currentPage !== 1) {
      const min = dataFavouriteProduct.currentPage - 1
      const params = { ...paramsMerchandise, page: min }
      setParamsMerchandise({ ...paramsMerchandise, page: min })
      dispatch(getFavouriteProduct(params))
    }
  }

  const handleNextPagination = () => {
    if(dataFavouriteProduct && dataFavouriteProduct.currentPage < dataFavouriteProduct.totalPage) {
      const sum = dataFavouriteProduct.currentPage + 1
      const params = { ...paramsMerchandise, page: sum }
      setParamsMerchandise({ ...paramsMerchandise, page: sum })
      dispatch(getFavouriteProduct(params))
    }
  }

  const handleChangeTag = (tag, checked) => {
    const nextSelectedTags = checked ? [...selectedTags, tag] : selectedTags.filter(t => t !== tag);
    console.log('You are interested in: ', nextSelectedTags);
    setSelectedTags(nextSelectedTags);
  }

  return (
    <LayoutCustom className={styles.container}>
      <Head>
        <title>Favourite Merchandise - M BarberShop</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <StyleRoot>
        <section style={{ padding: '4.5rem 0 8px 0', minHeight: '95vh' }}>
          <div style={styleAnimation.fadeIn}>
            <Row>
              <Col span={24} style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>
                <h2 className={styles.textHotProduct}>Your Favourite Product</h2>
                <p className={styles.textDescriptionProduct}>Come up with new fashion and be the center of attention</p>
              </Col>
            </Row>
            <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'space-around' }}>
              <div className={styles.prevButton} style={dataHotProduct && dataHotProduct.length > 0 ? { left: 15 } : { display: 'none' }} onClick={() => handleBackPagination()}>
                <Avatar className={styles.spanSetting} icon={<LeftOutlined />} />
              </div>
              <div>
                {
                  loadingMerchandise ?
                  (
                    <Row gutter={[16,16]} style={{ marginLeft: 0, marginRight: 0 }}>
                      {
                        dataSkeleton && dataSkeleton.map((data, index) => {
                          return (
                            <Col key={index} className="gutter-row" span={6} lg={6} md={12} sm={12} xs={12}>
                              <CardComponent />
                            </Col>
                          )
                        })
                    }
                    </Row>
                  )
                  :
                  dataHotProduct && dataHotProduct.length > 0 ?
                  (
                    <Row gutter={[16,16]} style={{ marginLeft: 0, marginRight: 0 }}>
                      {
                          dataHotProduct && dataHotProduct.map((data, index) => {
                            return (
                              <Col key={index} className="gutter-row" span={6} lg={6} md={12} sm={12} xs={12}>
                                <CardComponent name={data.Merchandise.name} price={data.Merchandise.sellingPrice} sourceImage={data.Merchandise.imageUrl} id={data.Merchandise.id} data={data.Merchandise} />
                              </Col>
                            )
                          })
                      }
                    </Row>
                  )
                  :
                  (
                    <Row align="middle" justify="center">
                      <Result
                        status="404"
                        title="404"
                        subTitle="Sorry, the product not found."
                      />
                    </Row>
                  )
                }
              </div>
              <div className={styles.nextButton} style={dataHotProduct && dataHotProduct.length > 0 ? { right: 15 } : { display: 'none' }} onClick={() => handleNextPagination()}>
                <Avatar className={styles.spanSetting} icon={<RightOutlined />} />
              </div>
            </div>
          </div>
        </section>
      </StyleRoot>

      <Drawer title="Search and Filter" placement="right" onClose={() => onClose()} visible={visibleSettings}>
        <h3>Search Product</h3>
        <Search
          placeholder="search shoes"
          allowClear
          onSearch={onSearch}
          onPressEnter={handleSearch}
        ></Search>
        <h3 style={{ marginTop: '3rem' }}>Product Tags</h3>
        {
          tagsData && tagsData.map((dataTag) => (
            <CheckableTag
              key={dataTag.id}
              checked={selectedTags.indexOf(dataTag.id) > -1}
              onChange={(checked) => handleChangeTag(dataTag.id, checked)}
            >
              {dataTag.name}
            </CheckableTag>
          ))
        }
      </Drawer>

      <div className={styleMerchandise.setting} onClick={() => handleSettings()}>
        <Tooltip title="Search & Filters">
          <Avatar className={styleMerchandise.spanSetting} icon={<SettingOutlined />} />
        </Tooltip>
      </div>

      <ModalDetailProduct/>
      
    </LayoutCustom>
  )
}

const styleAnimation = {
  fadeIn: {
    animation: 'x 3s',
    animationName: Radium.keyframes(fadeIn, 'fadeIn'),
  }
}