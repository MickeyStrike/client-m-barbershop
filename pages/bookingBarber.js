import React,{ useState, useEffect } from 'react'
import LayoutCustom from '../components/layoutCustom'
import styles from '../styles/Home.module.css';
import Head from 'next/head';
import { DatePicker, Empty, Modal, Button, Row, Col, Image, notification } from 'antd';
import { SearchOutlined } from '@ant-design/icons';
import ImageNext from 'next/image'
import moment from 'moment'
import { getListBookingList, postTransactionHaircut, setVisibleLogin, setNotification, updateTransactionPaymentHaircut } from '../storeRedux/actions/actionCreator'
import { useDispatch, useSelector } from 'react-redux'
import CardBooking from '../components/cardBooking';
import Script from 'next/script'

export default function BookBarber() {

  const dispatch = useDispatch()

  const [visible, setVisible] = useState(false)
  const [valueDatePicker, setValueDatePicker] = useState(moment())
  const [valueDatePickerPostBarber, setValueDatePickerPostBarber] = useState(moment())
  const [listBooking, setListBooking] = useState([])

  const dataListBooking = useSelector(state => state.clientReducer.dataListBooking)
  const loadingBookingList = useSelector(state => state.clientReducer.loadingBookingList)
  const isLogin = useSelector(state => state.clientReducer.isLogin)
  const dataTransactionPaymentHaircut = useSelector(state => state.clientReducer.dataTransactionPaymentHaircut)

  useEffect(() => {
    if(dataListBooking.data && !loadingBookingList) {
      setListBooking(dataListBooking.data)
    } else if(loadingBookingList) {
      setListBooking([null, null, null, null])
    } else {
      setListBooking([])
    }
  }, [dataListBooking, loadingBookingList])

  useEffect(() => {
    if(dataTransactionPaymentHaircut && Object.keys(dataTransactionPaymentHaircut).length > 0) {
      handleSnapPayment(dataTransactionPaymentHaircut.tokenId)
    }
  }, [dataTransactionPaymentHaircut])

  const updateTransaction = (result) => {
    console.log(result, 'result transaction')
    if(result) {
      dispatch(updateTransactionPaymentHaircut({
        ...result,
        dataTransaction: dataTransactionPaymentHaircut.dataTransaction
      }))
    } else {
      dispatch(updateTransactionPaymentHaircut({ 
        transaction_status: 'closed',
        dataTransaction: dataTransactionPaymentHaircut.dataTransaction
      }))
    }
  }

  const handleSnapPayment = (token) => {
    window.snap.pay(token, {
      onSuccess: function(result){
        /* You may add your own implementation here */
        updateTransaction(result)
      },
      onPending: function(result){
        /* You may add your own implementation here */
        updateTransaction(result)
      },
      onError: function(result){
        /* You may add your own implementation here */
        updateTransaction(result)
      },
      onClose: function(result){
        updateTransaction(result)
        /* You may add your own implementation here */
        dispatch(setNotification({
          type: 'error',
          message:'Error',
          description: 'Your Payment Cancelled',
        }))
      }
    })
  }
  
  function disabledDate(current) {
    // Can not select days before today and today
    return current && current < moment().subtract(1,'days').endOf('day');
  }

  const handleCancel = () => {
    setVisible(false)
  }

  const handleContinueToPayment = () => {
    const payload = {
      "queueDate": valueDatePickerPostBarber,
      "discount": 0
    }
    dispatch(postTransactionHaircut(payload))
  }

  const handleMakeYourBookingSchedule = () => {
    if (isLogin) {
      setVisible(true)
    }else {
      dispatch(setVisibleLogin(true))
    }
  }

  const handleFindBooking = () => {
    if(valueDatePicker) {
      const params = {
        search: `queueDate~*${moment(valueDatePicker).format('DD-MM-yyyy')}*`,
        page: 1,
        limit: 100,
        checkout: true,
        sorts: 'queueDate:asc'
      }
      dispatch(getListBookingList(params))
    } else {
      notification.error({
        message: 'Error',
        description: 'Select date first to get booking list'
      })
    }
  }

  return (
    <LayoutCustom className={styles.container}>
      <Head>
        <title>M BarberShop</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <Script type="text/javascript"
          src="https://app.sandbox.midtrans.com/snap/snap.js"
          data-client-key="SB-Mid-client-A1-Jamz55HdAcL8G"></Script>
      </Head>
      <section style={{ minHeight: '100vh' }}>
        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', minHeight: '100vh' }}>
          <h1>Booking List M BarberShop</h1>
          <div>
            <DatePicker style={{ marginRight: '0.5rem' }} format="DD-MMM-yyyy" value={valueDatePicker} onChange={(value) => setValueDatePicker(value)} />
            <Button type="primary" onClick={() => handleFindBooking()} loading={loadingBookingList}>Filter Date <SearchOutlined /></Button>
          </div>
          <div style={{ marginTop: '1rem' }}>
            <h3>The people who has made the booking schedule :</h3>
            {
              listBooking.length > 0 ?
              <div style={{ display: 'flex', justifyContent: 'space-around', alignContent: 'center', alignItems: 'center' }}>
                {
                  listBooking.map((dataMap, index) => {
                    return (
                      <CardBooking
                        key={index}
                        firstName={dataMap ? dataMap.Customer.firstName : dataMap}
                        initial={dataMap ? `${dataMap.Customer.firstName[0]}${dataMap.Customer.lastName[0]}` : dataMap}
                        queueDate={dataMap ? dataMap.queueDate.split(' ')[1] : dataMap}
                      />
                    )
                  })
                }
              </div>
              :
              <Empty></Empty>
            }
          </div>
          <Button type="ghost" onClick={() => handleMakeYourBookingSchedule()} style={{ marginTop: '1rem' }}>Make your Booking Schedule</Button>
        </div>
      </section>
      <Modal
        title="Make a Booking Schedule"
        visible={visible}
        closable={false}
        footer={[
          <Button key="back" onClick={() => handleCancel()}>
            Cancel
          </Button>,
          <Button key="submit" type="primary" onClick={() => handleContinueToPayment()}>
            Continue to Payment
          </Button>
        ]}
      >
        <>
          <Row>
            <Col span={8}>
              <label>
                Select Date and Time
              </label>
            </Col>
            <Col span={16}>
              <DatePicker
                disabledDate={disabledDate}
                showTime
                format="DD-MM-yyyy HH:mm:00"
                onChange={(_value, dateString) => setValueDatePickerPostBarber(dateString)}
                style={{ width: '100%' }}
              />
            </Col>
          </Row>
          <label style={{ display: 'block', marginTop: '1rem' }}>Available Payment</label>
          <Row justify="space-around" align="middle" style={{ marginTop: '1rem' }}>
            <Col span={6} xs={12} sm={12} md={12} lg={6} style={{ display: 'flex', justifyContent: 'center' }}>
              <ImageNext
                width={50}
                height={40}
                src="/assets/logo-bcapng-32694.png"
              />
            </Col>
            <Col span={6} xs={12} sm={12} md={12} lg={6} style={{ display: 'flex', justifyContent: 'center' }}>
              <ImageNext
                width={50}
                height={40}
                src="/assets/logo-gopay.png"
              />
            </Col>
            <Col span={6} xs={12} sm={12} md={12} lg={6} style={{ display: 'flex', justifyContent: 'center' }}>
              <ImageNext
                width={50}
                height={20}
                src="/assets/logo-qris.png"
              />
            </Col>
            <Col span={6} xs={12} sm={12} md={12} lg={6} style={{ display: 'flex', justifyContent: 'center' }}>
              <ImageNext
                width={50}
                height={25}
                src="/assets/logo-shopee-pay.png"
              />
            </Col>
          </Row>
          <Row>
            <div style={{ marginTop: '1rem', clear: 'both', color: 'rgba(0, 0, 0, 0.45)', fontSize: 14, lineHeight: 1.5, transition: 'color 0.3s cubic-bezier(0.215, 0.61, 0.355, 1)' }}>
              Note : if you select the time and date that same as people, and the system will make you the last queue number,
              if you continue to payment, then you aggree the term of services.
            </div>
          </Row>
        </>
      </Modal>
    </LayoutCustom>
  )
}
